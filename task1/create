#!/bin/bash

# TASK 1 - automated create users and groups from file
# Matt Revell - Operating Systems Concepts 2021
# This batch script automates user and group creation from a CSV file

# FUNCTIONS ----------------------------------------------------------------------

function title () {
	clear
	echo " "
	echo -e "\e[33m*******************************************"
	echo -e "Task 1 - Script to create user environments"
	echo -e "*******************************************\e[39m"
	echo " "
}

function end () {
	echo " "
	echo "Thanks for using the script. Goodbye ..."
}

# if a filename/URI was not supplied as an arguement when running the script
# get an input from the user and return it.

function getfilename () {
	local _filename=""
	# echo 'No file arguement supplied'
	read -p "Input a filename or URI: " _filename
	echo "$_filename"
}

# Functions for extracting the username from an email address
# uses the 'cut' command with delimiters @,.
function getfullname () {
    echo "$1" | cut -d@ -f1
}

function getsurname () {
    echo "$1" | cut -d. -f2
}

function getusername () {
	email=$1

	local fullname=$(getfullname $email)
    
   	local firstinitial=${fullname:0:1}
    
	local surname=$(getsurname $fullname)
    
    	local user=$firstinitial$surname

    	echo $user
}

# Main function for user environment creation
function createuser () {
	email=$1
	birthdate=$2
	groups=$3
	sharedfolder=$4
	
	# blank lines on screen an in logfile to seperate sections
	echo -e "\e[33mEmail:\e[39m $email / \e[33mDOB:\e39m $birthdate / \e[33mGroups:\e[39em $groups / \e[33mShared:\e[39em $sharedfolder"
	echo " "
	echo " " >> logfile.txt
	
	# create username from email address
	username=$(getusername $email)

	# Add the user called 'username' and log any errors 
	# sudo userdel $username
	sudo useradd -m $username 2>> logfile.txt
	
	# add password to create user. Password expires so that it must be changed on login
	MONTH=$(date -d "$birthdate" '+%m')
	YEAR=$(date -d "$birthdate" '+%Y')
	pass=$MONTH$YEAR
	# echo $pass
	echo -e "$pass\n$pass" | sudo passwd --expire $username 2>> logfile.txt

	# create groups for this user if there are any.
	# check if the group field contains commas (i.e. several groups to create or add the user to)
	# cut up the groups with the delimiter ','
	# echo $groups
	if [ ! -z "$groups" ]
	then
		if [[ $groups == *","* ]]
		then
			section=1
			eachgroup=$(echo "$groups" | cut -d, -f$section)
			while [ ! -z "$eachgroup" ]
			do
				# attempt to create the group whether it exists or not and add the user to that group
				sudo groupadd -f $eachgroup 2>> logfile.txt
				sudo usermod -aG $eachgroup $username 2>> logfile.txt
				# if the user belongs to sudo then create the alias. NOT WORKING ???
				if [[ "$eachgroup" == "sudo" ]]
				then
					echo 'alias off="systemctl poweroff"' >> /home/$username/.profile 2>> logfile.txt
				fi
				(( section++ ))
				eachgroup=$(echo "$groups" | cut -d, -f$section)
			done
		else
			# if the groups field doesn't contain commas then just add one group etc. (i.e. no while loop needed)
			eachgroup=$(echo "$groups" | cut -d, -f1)
			echo $eachgroup
			sudo groupadd -f $eachgroup 2>> logfile.txt
			sudo usermod -aG $eachgroup $username 2>> logfile.txt
			if [[ "$eachgroup" == "sudo" ]]
			then
				echo 'alias off="systemctl poweroff"' >> /home/$username/.profile 2>> logfile.txt
			fi
		fi
	fi
	
	# Shared folder is created with a soft link inside
	if [ ! -z "$sharedfolder" ]
	then
		sudo mkdir $sharedfolder 2>> logfile.txt
		sudo ln -s "$sharedfolder" "/home/$username/shared" 2>> logfile.txt
		# chmod - set permissions for the sharedfolder chmod XXX "/home/$username/shared" ???
	fi
}

# Main function for initial checks, looping through users file.
function main () {	
	args=$1
	numargs=$2
	
	# check if arg/file provided when script executed
	if [ $numargs -ne 1 ]
	then
		filename=$(getfilename)
	else
		filename=$args
	fi	
	
	# check if a URI or local filename provided and do action depending on this.
	# if filename has a / in it then assume URI
	if [[ $filename == *"/"* ]]
	then
		echo "URI provided - checking if file exists on server"
		
		# use wget --spider, if error output redirected then check result true/false
		# wget example uri - http://kate.ict.op.ac.nz/~faisalh/IN617linux/users.csv 	
		if [[ `wget -S --spider $filename 2>&1 | grep 'HTTP/1.1 200 OK'` ]]
		then
			echo "File exists on server .. downloading it"
			wget $filename
			# After downloading the file, remove the actual filename from the URI with 'basename'
			onlyfile=$(basename -- "$filename")
			filename=$onlyfile
		else
			echo "File does not exist on server"
			exit
		fi
	else
		echo "Local filename provided"
		echo $filename
		# Check if file exists in the local folder
		path=$PWD"/$filename"
		echo $path

		if [[ -f "$path" ]]
		then
			echo "File exists in local folder"
		else
			echo "The file does not exist"
			exit
		fi
	fi
	
	# filename should now be local			
	# use IFS ';' separator/delimiter save and restore current/old IFS
	# start a new logfile entry
	echo "***************************************************************************" >> logfile.txt
	echo "LOGGING FOR DATE & TIME: " $(date '+%d/%m/%Y %H:%M:%S') >> logfile.txt
	echo "***************************************************************************" >> logfile.txt
	usercount=0
	
	OLDIFS=$IFS
	IFS=";"
	
	# Main loop that extracts lines from the users file and uses the fields for user creation
	while read email birthdate groups sharedfolder
	do
		# loop through the users file. Ignore the first line which is headings only.
		if [ "$usercount" -gt 0 ]
		then
			echo $email
			# Call the create function with arguements provided from the users file.
			createuser $email $birthdate $groups $sharedfolder $logfile
		fi
		(( usercount++ ))
	done < $filename
	
	IFS=$OLDIFS
	
	# Results
	echo $(( usercount-1 ))" users have been created"
	
	# Ask user if they want to view the logfile.
	read -p "Do you wish to view the log file? (Yy/Nn): " yn
	if [ "$yn" = "Y" ] || [ "$yn" = "y" ]
	then
		clear		
		cat logfile.txt | less
	fi
}

# END OF FUNCTIONS --------------------------------------------------------------------

# Call functions from above to run the program/script.

title
args=$1
numargs=$#
main "$args" "$numargs"
end

exit
